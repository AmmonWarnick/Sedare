{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/ammonwarnick/Desktop/Sedare/customComponents/InPageNavigator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar InPageNavigator = function InPageNavigator(props) {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      index = _React$useState2[0],\n      setIndex = _React$useState2[1];\n\n  var translateX = React.useRef(new Animated.Value(0)).current;\n  var height = props.height,\n      width = props.width,\n      horizontalPaddings = props.horizontalPaddings,\n      verticalPaddings = props.verticalPaddings,\n      horizontalBorders = props.horizontalBorders,\n      verticalBorders = props.verticalBorders,\n      childrenLength = props.childrenLength;\n  var childWidth = (width - horizontalBorders - horizontalPaddings) / childrenLength;\n  var childHeight = height - verticalBorders - verticalPaddings;\n  var activeTextColor = props.activeTextColor;\n  var inActiveTextColor = props.inActiveTextColor;\n\n  var recursiveMap = function recursiveMap(children, activeTextColor) {\n    return React.Children.map(children, function (child) {\n      if (!React.isValidElement(child)) {\n        return child;\n      }\n\n      if (child.props.children) {\n        child = React.cloneElement(child, {\n          children: recursiveMap(child.props.children, activeTextColor),\n          style: {\n            color: activeTextColor\n          }\n        });\n      } else {\n        child = React.cloneElement(child, {\n          color: {\n            color: activeTextColor\n          }\n        });\n      }\n\n      return child;\n    });\n  };\n\n  return React.createElement(View, {\n    style: [props.navcontainer, {\n      display: \"flex\",\n      flexDirection: \"row\",\n      height: height,\n      width: width,\n      justifyContent: \"center\",\n      alignContent: \"center\"\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Animated.View, {\n    style: [props.slider, {\n      position: \"absolute\",\n      backgroundColor: props.sliderBackgroundColor,\n      borderRadius: props.sliderRadius,\n      left: horizontalPaddings / 2,\n      width: childWidth,\n      height: childHeight,\n      transform: [{\n        translateX: translateX\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), props.children && props.children.map(function (child, i) {\n    var colorStyle = {};\n\n    if (activeTextColor && index === i) {\n      colorStyle.color = activeTextColor;\n    } else {\n      colorStyle.color = inActiveTextColor;\n    }\n\n    return React.createElement(View, {\n      style: _objectSpread({\n        display: \"flex\",\n        flex: 1,\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }, colorStyle),\n      onStartShouldSetResponder: function onStartShouldSetResponder() {\n        return true;\n      },\n      onResponderGrant: function onResponderGrant() {},\n      onResponderRelease: function onResponderRelease() {\n        setIndex(i);\n        Animated.timing(translateX, {\n          toValue: childWidth * i,\n          duration: 100,\n          useNativeDriver: false\n        }).start();\n        var func = props[\"onClick\" + i];\n        func();\n      },\n      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {\n        return true;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, React.cloneElement(child, {\n      children: recursiveMap(child.props.children, colorStyle.color),\n      style: {\n        color: colorStyle.color\n      }\n    }));\n  }));\n};\n\nexport default InPageNavigator;","map":{"version":3,"sources":["/Users/ammonwarnick/Desktop/Sedare/customComponents/InPageNavigator.js"],"names":["React","InPageNavigator","props","useState","index","setIndex","translateX","useRef","Animated","Value","current","height","width","horizontalPaddings","verticalPaddings","horizontalBorders","verticalBorders","childrenLength","childWidth","childHeight","activeTextColor","inActiveTextColor","recursiveMap","children","Children","map","child","isValidElement","cloneElement","style","color","navcontainer","display","flexDirection","justifyContent","alignContent","slider","position","backgroundColor","sliderBackgroundColor","borderRadius","sliderRadius","left","transform","i","colorStyle","flex","alignItems","timing","toValue","duration","useNativeDriver","start","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, StyleSheet, Animated,Button, Dimensions } from 'react-native';\n\nconst InPageNavigator = (props) => {\n  const [index, setIndex] = React.useState(0);\n  const translateX = React.useRef(new Animated.Value(0)).current\n\n\n  const {\n    height,\n    width, \n    horizontalPaddings, \n    verticalPaddings, \n    horizontalBorders, \n    verticalBorders,\n    childrenLength\n  } = props;\n\n  const childWidth = (width - horizontalBorders - horizontalPaddings)/childrenLength;\n  const childHeight = height - verticalBorders - verticalPaddings;\n  const activeTextColor = props.activeTextColor;\n  const inActiveTextColor = props.inActiveTextColor;\n\n  const recursiveMap = (children, activeTextColor) => {\n  return React.Children.map(children, child => {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    if (child.props.children) {\n      child = React.cloneElement(child, {\n        children: recursiveMap(child.props.children, activeTextColor),\n        style: {color: activeTextColor}\n      });\n    } else {\n      child = React.cloneElement(child, {color: {color: activeTextColor}})\n    }\n\n    return child;\n  });\n  } \n\n  // const widhtX = (Dimensions.get(\"window\").width - 16 - 16 - horizontalPaddings - horizontalBorders)/childrenLength;\n  return (\n      <View style={[props.navcontainer, {display: \"flex\", flexDirection: \"row\", height, width, justifyContent: \"center\", alignContent: \"center\"}]}>\n        <Animated.View style={[props.slider, {\n          position: \"absolute\",\n          backgroundColor: props.sliderBackgroundColor,\n          borderRadius: props.sliderRadius,\n          left: horizontalPaddings/2,\n          // top: verticalPaddings/2,\n          // paddingLeft: 100,\n          width: childWidth,\n          height: childHeight,\n          transform: [\n            {translateX: translateX}\n          ]\n          }]}>\n        </Animated.View>\n      {\n        \n        props.children && props.children.map((child, i) => {\n          const colorStyle = {};\n          if (activeTextColor && index === i){\n            colorStyle.color = activeTextColor\n          } else {\n            colorStyle.color = inActiveTextColor;\n          }\n            return (\n            <View \n              style={{display: \"flex\", flex: 1,flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", ...colorStyle}}\n              onStartShouldSetResponder = {() => {return true}}\n              onResponderGrant = {() => {}} onResponderRelease = {() => {\n                setIndex(i);\n                Animated.timing(translateX, {\n                  toValue: childWidth*i,\n                  duration: 100,\n                  useNativeDriver: false\n                }).start();\n                const func = props[`onClick${i}`];\n                func();\n          }} \n            onStartShouldSetResponderCapture = {() => true}\n          >\n            {\n              React.cloneElement(child, {\n                children: recursiveMap(child.props.children, colorStyle.color),\n                style: {color: colorStyle.color}\n              })\n            }\n          </View>)\n        })\n      }\n        \n      </View>\n  );\n}\n\n//  <View style={{\n//         position: \"absolute\",\n//         display: \"flex\",\n//         flexDirection: \"row\",\n//         backgroundColor: \"green\",\n//         right: props.horizontalPaddings/2,\n//         left: \"auto\",\n//         // left: props.horizontalPaddings/2,\n//         width: \"100%\", \n//         height: \"100%\",\n\n//         }}>\n//           <Animated.View style={[props.slider, {\n//             position: \"absolute\",\n//             backgroundColor: props.sliderBackgroundColor,\n//             borderRadius: props.sliderRadius,\n//             // left: horizontalPaddings/2,\n//             // top: verticalPaddings/2,\n//             // paddingLeft: 100,\n//             width: `${100/childrenLength}%`,\n//             height: childHeight,\n//             zIndex: 100\n//             // transform: [\n//             //   {translateX: translateX}\n//             // ]\n//             }]}>\n//           </Animated.View>\n//       </View>\n\n\nexport default InPageNavigator;"]},"metadata":{},"sourceType":"module"}